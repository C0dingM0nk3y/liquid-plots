min.segment.length = 0, #segments , this size as not plotted
segment.linetype = 2, #"dash"
direction = "both", # segment direction: "both", "x", "y"
nudge_x = nudge_x,
nudge_y = lastCumAPY*1.2,
na.rm = T
)
return(plot)
}
plotLimits.Calc <- function(stopLossTolerance = 0.01,
calc_nudgeParam = TRUE,
hide_slbase = TRUE){
# Helper function. It allows to calculate important pool reference prices (aka. limits, e.g. stop loss, braek eaven..)
# it also calculate details required for plotting (color, legend, offsets...)
# required inputs: ..... from GlobalEnv (e.g. end_DF...)
# empty DF to begin calculations
limits_df <- data.frame(Direction = c("UP", "DOWN"),
SL_X100 = c(stopLossTolerance, -stopLossTolerance),
Sign = c(1,-1))
# BreakEven Limits (earnings)
limits_df[,"BE_X100"] <- ifelse(limits_df[,"Direction"]=="DOWN", #change sign if Direction == "DOWN"
-end_maxEarnX100, end_maxEarnX100)
# Adjusted StopLoss (includes earnings)
limits_df[,"SL_X100adj"] <- limits_df[,"SL_X100"] + limits_df[,"BE_X100"]
# tidy up dataframe
limits_df2 <-  pivot_longer(limits_df, cols=c("SL_X100", "BE_X100", "SL_X100adj"),
names_to = "Type", values_to = "LimitX100")
# calculate the Ratio at which the pool with reach Limit
for (r in 1:nrow(limits_df2)){
limits_df2[r, "Limit_Ratio"] <- ILtoRatio(limits_df2[r, "LimitX100"], trend = limits_df2[r, "Direction"])}
# Converts Ratio to Price
limits_df2[, "Limit_Price"] <- limits_df2[, "Limit_Ratio"]* start_price
# Add "PriceNow"
limits_df2 <- add_row(limits_df2,
Sign = 1,
Type = "PriceNOW",
LimitX100 = RatioToIL(PriceChange = (end_price/start_price)), #IL at price NOW (for plotting axis)
Limit_Ratio = end_price/start_price, # Ratio
Limit_Price = end_price) # Price
# Makes LABELS
bool <- limits_df2$Limit_Price>100 #round down or trunc depending on how big is the price
limits_df2[bool, "Label_Text"] <- round(limits_df2[bool, "Limit_Price"],0) %>% unlist() %>% as.character() #round and convert to text
limits_df2[!(bool), "Label_Text"] <- signif(limits_df2[!(bool), "Limit_Price"],3) %>% unlist() %>% as.character() #round to significant digits
# Customuze labels
# color palette: http://sape.inf.usi.ch/sites/default/files/ggplot2-colour-names.png
limits_df2[, c("Label_root", "TextColor")] <- NA #add_empty
for (r in 1:nrow(limits_df2)){
label <- limits_df2[r, "Type"]
if(str_starts(label, "SL")){
limits_df2[r, c("Label_root", "Color", "TextColor")] <- c("Stop-loss", "firebrick1", "white") %>% as.list()}
if(str_starts(label, "BE")){
limits_df2[r, c("Label_root", "Color", "TextColor")] <- c("Break-even", "dodgerblue3", "white") %>% as.list()}
if(str_starts(label, "PriceNOW")){
limits_df2[r, c("Label_root", "Color", "TextColor")] <- c("Current", "springgreen3", "black") %>% as.list()}
#Extended labels
limits_df2[r, "Label_Extended"] <- paste(limits_df2[r, "Label_root"], limits_df2[r, "Label_Text"], sep=": ") %>% unlist
if(str_starts(label, "SL")){ #stop-loss only
limits_df2[r, "Label_Extended"] <- sprintf("%s (%s%%): %s",
limits_df2[r, "Label_root"],round(stopLossTolerance*100,1), limits_df2[r, "Label_Text"])}
}
# Color Coded PRICE
limit_price <- subset(limits_df2, Type=="PriceNOW", select="LimitX100")
limit_be <- subset(limits_df2, Type=="BE_X100", select="LimitX100") %>% max() #upper limit
limit_sl <- subset(limits_df2, Type=="SL_X100adj", select="LimitX100") %>% max() #upper limit
if (abs(limit_price)>abs(limit_be)){limits_df2[limits_df2$Type=="PriceNOW", "Color"] <- "orange"}
if (abs(limit_price)>abs(limit_sl)){limits_df2[limits_df2$Type=="PriceNOW", "Color"] <- "red"}
# OTHER PARAM: Nudge offset
if (calc_nudgeParam){
#static param
xLim_left <- min(pool_LAST[["Date_UTC"]], claim_CALC[["Date_UTC"]]) %>% as.POSIXct()
xLim_right <- max(pool_LAST[["Date_UTC"]], claim_CALC[["Date_UTC"]]) %>% as.POSIXct()
nudge_x <- (datetime_to_sec(xLim_right)- datetime_to_sec(xLim_left)) %>% #distance (in UNIX time!) from label and datapoint.
as.numeric()*0.4 #multiply by 0.4 (size of 2/5 of the plot area)) #v3.5 changed from 0.2
# Nudge adjustment
limits_df2[, "nudge_x"] <- nudge_x #create defaults
limits_df2[, "nudge_y"] <- 0 #create defaults
#correct signs
limits_df2[, "nudge_y"] <- limits_df2[, "nudge_y"]*limits_df2[, "Sign"]
}
# OTHER PARAM: hide basic Stop-Loss (not adjusted)
if (hide_slbase){
limits_df2 <- subset(limits_df2, !(Type ==  "SL_X100")) #Hides limits that should not be plotted
}
limits_df2 <- limits_df2[order(limits_df2$Limit_Ratio, decreasing = T),]
return(limits_df2)
}
with(pool_MERGED, ValueTOT-start_value)
yMin_abs <- min(-1, with(pool_MERGED, ValueTOT-start_value)) #min 1 USD
yMax_abs
yMax_abs <- max(1, pool_MERGED$ROI_net) #min 1 USD
yMin_abs
yMin_abs <- min(-1, with(pool_MERGED, ValueTOT-start_value)) #min 1 USD
yMin_abs
yMax_abs
source("D:/Clouds/GitHub/liquid-plots/_SCRIPTS/functions_plots.R")
setStopLoss <- 0.005 #set desired stop loss for plots
allow_refData = FALSE
for (id in poolId_list[1]){
source("_SCRIPTS/script_plotPool_v0.R") # makes calc
cat(sprintf("#### %s <br>\n", poolName))
cat("<div>\n") #needed to encapsulate plot element so not to distrupt the TAB function
p1 <- LiqPlots_Trends() #plot1
p2 <- LiqPlots_ILChanges(stopLossTolerance = setStopLoss) #plot2
p3 <- LiqPlots_Swaps()
p4 <- LiqPlots_PNL(type = "rel") %>% print
p4bis <- LiqPlots_PNL(type = "abs") %>% print
p5 <- LiqPlots_plotAPY()
cat("</div>\n")
# Arrange plots (pathwork)
#Plot L
pw_left <- p1/p2
pw_left[[1]] %<>% + theme(axis.title.x = element_blank(), axis.text.x=element_blank()) # Remove x.axis title and tick names from subplot
pw_left[[1]] %<>% + theme(plot.background = element_rect(fill = "white"), panel.background = element_rect(fill = panel_color))
#pw[[2]] = pw[[2]] + theme(plot.title = element_blank()) # Remove title from second subplot
pw_left <- pw_left + plot_layout(heights = c(6,6), nrow = 2)
#Plot R
pw_right <- ggplot()/p3/p4/p5
pw_right[[1]] %<>% + theme(plot.background = element_rect(fill = "white"), panel.background = element_rect(fill = panel_color))
pw_right[[2]] %<>% + theme(axis.title.x = element_blank(), axis.text.x=element_blank()) # Remove x.axis title and tick names from subplot
pw_right[[3]] %<>% + theme(axis.title.x = element_blank(), axis.text.x=element_blank())
pw_right <- pw_right + plot_layout(heights = c(2,6,4,4), nrow = 4)
pw <- pw_left|pw_right
pw <- pw + plot_layout(widths = c(3,2), ncol = 2)
print(pw)
# Link to Binance pool
cat(sprintf('<p><a href="https://www.binance.com/en/swap/liquidity?poolId=%s">Direct Link to Binance Pool (%s)</a></p>\n', id, poolName))
}
source("D:/Clouds/GitHub/liquid-plots/_SCRIPTS/functions_plots.R")
source("D:/Clouds/GitHub/liquid-plots/_SCRIPTS/functions_plots.R")
#Plot R
#pw_right <- ggplot(p4bis)/p3/p4/p5
#pw_right[[1]] %<>% + theme(plot.background = element_rect(fill = "white"), panel.background = element_rect(fill = panel_color))
pw_right <- p3/p4/p4bis/p5
pw_right
source("D:/Clouds/GitHub/liquid-plots/_SCRIPTS/functions_plots.R")
setStopLoss <- 0.005 #set desired stop loss for plots
allow_refData = FALSE
for (id in poolId_list[1]){
source("_SCRIPTS/script_plotPool_v0.R") # makes calc
cat(sprintf("#### %s <br>\n", poolName))
cat("<div>\n") #needed to encapsulate plot element so not to distrupt the TAB function
p1 <- LiqPlots_Trends() #plot1
p2 <- LiqPlots_ILChanges(stopLossTolerance = setStopLoss) #plot2
p3 <- LiqPlots_Swaps()
p4 <- LiqPlots_PNL(type = "rel") %>% print
p4bis <- LiqPlots_PNL(type = "abs") %>% print
p5 <- LiqPlots_plotAPY()
cat("</div>\n")
# Arrange plots (pathwork)
#Plot L
pw_left <- p1/p2
pw_left[[1]] %<>% + theme(axis.title.x = element_blank(), axis.text.x=element_blank()) # Remove x.axis title and tick names from subplot
pw_left[[1]] %<>% + theme(plot.background = element_rect(fill = "white"), panel.background = element_rect(fill = panel_color))
#pw[[2]] = pw[[2]] + theme(plot.title = element_blank()) # Remove title from second subplot
pw_left <- pw_left + plot_layout(heights = c(6,6), nrow = 2)
#Plot R
#pw_right <- ggplot(p4bis)/p3/p4/p5
#pw_right[[1]] %<>% + theme(plot.background = element_rect(fill = "white"), panel.background = element_rect(fill = panel_color))
pw_right <- p3/p4/p4bis/p5
pw_right[[1]] %<>% + theme(axis.title.x = element_blank(), axis.text.x=element_blank()) # Remove x.axis title and tick names from subplot
pw_right[[2]] %<>% + theme(axis.title.x = element_blank(), axis.text.x=element_blank())
pw_right[[3]] %<>% + theme(axis.title.x = element_blank(), axis.text.x=element_blank())
pw_right <- pw_right + plot_layout(heights = c(6,4,4,4), nrow = 4)
pw <- pw_left|pw_right
pw <- pw + plot_layout(widths = c(3,2), ncol = 2)
print(pw)
# Link to Binance pool
cat(sprintf('<p><a href="https://www.binance.com/en/swap/liquidity?poolId=%s">Direct Link to Binance Pool (%s)</a></p>\n', id, poolName))
}
source("D:/Clouds/GitHub/liquid-plots/_SCRIPTS/functions_plots.R")
source("D:/Clouds/GitHub/liquid-plots/_SCRIPTS/functions_plots.R")
source("D:/Clouds/GitHub/liquid-plots/_SCRIPTS/functions_plots.R")
source("D:/Clouds/GitHub/liquid-plots/_SCRIPTS/functions_plots.R")
setStopLoss <- 0.005 #set desired stop loss for plots
allow_refData = FALSE
for (id in poolId_list[1]){
source("_SCRIPTS/script_plotPool_v0.R") # makes calc
cat(sprintf("#### %s <br>\n", poolName))
cat("<div>\n") #needed to encapsulate plot element so not to distrupt the TAB function
p1 <- LiqPlots_Trends() #plot1
p2 <- LiqPlots_ILChanges(stopLossTolerance = setStopLoss) #plot2
p3 <- LiqPlots_Swaps()
p4 <- LiqPlots_PNL(type = "rel") %>% print
p4bis <- LiqPlots_PNL(type = "abs") %>% print
p5 <- LiqPlots_plotAPY()
cat("</div>\n")
# Arrange plots (pathwork)
#Plot L
pw_left <- p1/p2
pw_left[[1]] %<>% + theme(axis.title.x = element_blank(), axis.text.x=element_blank()) # Remove x.axis title and tick names from subplot
pw_left[[1]] %<>% + theme(plot.background = element_rect(fill = "white"), panel.background = element_rect(fill = panel_color))
#pw[[2]] = pw[[2]] + theme(plot.title = element_blank()) # Remove title from second subplot
pw_left <- pw_left + plot_layout(heights = c(6,6), nrow = 2)
#Plot R
#pw_right <- ggplot(p4bis)/p3/p4/p5
#pw_right[[1]] %<>% + theme(plot.background = element_rect(fill = "white"), panel.background = element_rect(fill = panel_color))
pw_right <- p3/p4/p4bis/p5
pw_right[[1]] %<>% + theme(axis.title.x = element_blank(), axis.text.x=element_blank()) # Remove x.axis title and tick names from subplot
pw_right[[2]] %<>% + theme(axis.title.x = element_blank(), axis.text.x=element_blank())
pw_right[[3]] %<>% + theme(axis.title.x = element_blank(), axis.text.x=element_blank())
pw_right <- pw_right + plot_layout(heights = c(6,4,4,4), nrow = 4)
pw <- pw_left|pw_right
pw <- pw + plot_layout(widths = c(3,2), ncol = 2)
print(pw)
# Link to Binance pool
cat(sprintf('<p><a href="https://www.binance.com/en/swap/liquidity?poolId=%s">Direct Link to Binance Pool (%s)</a></p>\n', id, poolName))
}
pw_left[[1]] %<>% + theme(axis.title.x = element_blank(), axis.text.x=element_blank()) # Remove x.axis title and tick names from subplot
pw_left[[1]] %<>% + theme(plot.background = element_rect(fill = "white"), panel.background = element_rect(fill = panel_color))
pw_left <- pw_left + plot_layout(heights = c(6,6), nrow = 2)
#Plot R
#pw_right <- ggplot(p4bis)/p3/p4/p5
#pw_right[[1]] %<>% + theme(plot.background = element_rect(fill = "white"), panel.background = element_rect(fill = panel_color))
pw_right <- p3/p4/p4bis/p5
pw_right[[1]] %<>% + theme(axis.title.x = element_blank(), axis.text.x=element_blank()) # Remove x.axis title and tick names from subplot
pw_right[[2]] %<>% + theme(axis.title.x = element_blank(), axis.text.x=element_blank())
pw_right[[3]] %<>% + theme(axis.title.x = element_blank(), axis.text.x=element_blank())
pw_right <- pw_right + plot_layout(heights = c(6,4,4,4), nrow = 4)
pw <- pw_left|pw_right
pw <- pw + plot_layout(widths = c(3,2), ncol = 2)
print(pw)
source("_SCRIPTS/script_plotPool_v0.R") # makes calc
cat(sprintf("#### %s <br>\n", poolName))
cat("<div>\n") #needed to encapsulate plot element so not to distrupt the TAB function
p1 <- LiqPlots_Trends() #plot1
p2 <- LiqPlots_ILChanges(stopLossTolerance = setStopLoss) #plot2
p3 <- LiqPlots_Swaps()
p4 <- LiqPlots_PNL(type = "rel") %>% print
p3 <- LiqPlots_Swaps()
source("D:/Clouds/GitHub/liquid-plots/_SCRIPTS/functions_plots.R")
setStopLoss <- 0.005 #set desired stop loss for plots
allow_refData = FALSE
for (id in poolId_list[1]){
source("_SCRIPTS/script_plotPool_v0.R") # makes calc
cat(sprintf("#### %s <br>\n", poolName))
cat("<div>\n") #needed to encapsulate plot element so not to distrupt the TAB function
p1 <- LiqPlots_Trends() #plot1
p2 <- LiqPlots_ILChanges(stopLossTolerance = setStopLoss) #plot2
p3 <- LiqPlots_Swaps()
p4 <- LiqPlots_PNL(type = "rel") %>% print
p4bis <- LiqPlots_PNL(type = "abs") %>% print
p5 <- LiqPlots_plotAPY()
cat("</div>\n")
# Arrange plots (pathwork)
#Plot L
pw_left <- p1/p2
pw_left[[1]] %<>% + theme(axis.title.x = element_blank(), axis.text.x=element_blank()) # Remove x.axis title and tick names from subplot
pw_left[[1]] %<>% + theme(plot.background = element_rect(fill = "white"), panel.background = element_rect(fill = panel_color))
#pw[[2]] = pw[[2]] + theme(plot.title = element_blank()) # Remove title from second subplot
pw_left <- pw_left + plot_layout(heights = c(6,6), nrow = 2)
#Plot R
#pw_right <- ggplot(p4bis)/p3/p4/p5
#pw_right[[1]] %<>% + theme(plot.background = element_rect(fill = "white"), panel.background = element_rect(fill = panel_color))
pw_right <- p3/p4/p4bis/p5
pw_right[[1]] %<>% + theme(axis.title.x = element_blank(), axis.text.x=element_blank()) # Remove x.axis title and tick names from subplot
pw_right[[2]] %<>% + theme(axis.title.x = element_blank(), axis.text.x=element_blank())
pw_right[[3]] %<>% + theme(axis.title.x = element_blank(), axis.text.x=element_blank())
pw_right <- pw_right + plot_layout(heights = c(6,4,4,4), nrow = 4)
pw <- pw_left|pw_right
pw <- pw + plot_layout(widths = c(3,2), ncol = 2)
print(pw)
# Link to Binance pool
cat(sprintf('<p><a href="https://www.binance.com/en/swap/liquidity?poolId=%s">Direct Link to Binance Pool (%s)</a></p>\n', id, poolName))
}
source("D:/Clouds/GitHub/liquid-plots/_SCRIPTS/functions_plots.R")
setStopLoss <- 0.005 #set desired stop loss for plots
allow_refData = FALSE
for (id in poolId_list[1]){
source("_SCRIPTS/script_plotPool_v0.R") # makes calc
cat(sprintf("#### %s <br>\n", poolName))
cat("<div>\n") #needed to encapsulate plot element so not to distrupt the TAB function
p1 <- LiqPlots_Trends() #plot1
p2 <- LiqPlots_ILChanges(stopLossTolerance = setStopLoss) #plot2
p3 <- LiqPlots_Swaps()
p4 <- LiqPlots_PNL(type = "rel") %>% print
p4bis <- LiqPlots_PNL(type = "abs") %>% print
p5 <- LiqPlots_plotAPY()
cat("</div>\n")
# Arrange plots (pathwork)
#Plot L
pw_left <- p1/p2
pw_left[[1]] %<>% + theme(axis.title.x = element_blank(), axis.text.x=element_blank()) # Remove x.axis title and tick names from subplot
pw_left[[1]] %<>% + theme(plot.background = element_rect(fill = "white"), panel.background = element_rect(fill = panel_color))
#pw[[2]] = pw[[2]] + theme(plot.title = element_blank()) # Remove title from second subplot
pw_left <- pw_left + plot_layout(heights = c(6,6), nrow = 2)
#Plot R
#pw_right <- ggplot(p4bis)/p3/p4/p5
#pw_right[[1]] %<>% + theme(plot.background = element_rect(fill = "white"), panel.background = element_rect(fill = panel_color))
pw_right <- p3/p4/p4bis/p5
pw_right[[1]] %<>% + theme(axis.title.x = element_blank(), axis.text.x=element_blank()) # Remove x.axis title and tick names from subplot
pw_right[[2]] %<>% + theme(axis.title.x = element_blank(), axis.text.x=element_blank())
pw_right[[3]] %<>% + theme(axis.title.x = element_blank(), axis.text.x=element_blank())
pw_right <- pw_right + plot_layout(heights = c(6,4,4,4), nrow = 4)
pw <- pw_left|pw_right
pw <- pw + plot_layout(widths = c(3,2), ncol = 2)
print(pw)
# Link to Binance pool
cat(sprintf('<p><a href="https://www.binance.com/en/swap/liquidity?poolId=%s">Direct Link to Binance Pool (%s)</a></p>\n', id, poolName))
}
source("D:/Clouds/GitHub/liquid-plots/_SCRIPTS/functions_plots.R")
setStopLoss <- 0.005 #set desired stop loss for plots
allow_refData = FALSE
for (id in poolId_list[1]){
source("_SCRIPTS/script_plotPool_v0.R") # makes calc
cat(sprintf("#### %s <br>\n", poolName))
cat("<div>\n") #needed to encapsulate plot element so not to distrupt the TAB function
p1 <- LiqPlots_Trends() #plot1
p2 <- LiqPlots_ILChanges(stopLossTolerance = setStopLoss) #plot2
p3 <- LiqPlots_Swaps()
p4 <- LiqPlots_PNL(type = "rel") %>% print
p4bis <- LiqPlots_PNL(type = "abs") %>% print
p5 <- LiqPlots_plotAPY()
cat("</div>\n")
# Arrange plots (pathwork)
#Plot L
pw_left <- p1/p2
pw_left[[1]] %<>% + theme(axis.title.x = element_blank(), axis.text.x=element_blank()) # Remove x.axis title and tick names from subplot
pw_left[[1]] %<>% + theme(plot.background = element_rect(fill = "white"), panel.background = element_rect(fill = panel_color))
#pw[[2]] = pw[[2]] + theme(plot.title = element_blank()) # Remove title from second subplot
pw_left <- pw_left + plot_layout(heights = c(6,6), nrow = 2)
#Plot R
#pw_right <- ggplot(p4bis)/p3/p4/p5
#pw_right[[1]] %<>% + theme(plot.background = element_rect(fill = "white"), panel.background = element_rect(fill = panel_color))
pw_right <- p3/p4/p4bis/p5
pw_right[[1]] %<>% + theme(axis.title.x = element_blank(), axis.text.x=element_blank()) # Remove x.axis title and tick names from subplot
pw_right[[2]] %<>% + theme(title = element_blank(),
axis.title.x = element_blank(), axis.text.x=element_blank())
pw_right[[3]] %<>% + theme(axis.title.x = element_blank(), axis.text.x=element_blank())
pw_right <- pw_right + plot_layout(heights = c(6,4,4,4), nrow = 4)
pw <- pw_left|pw_right
pw <- pw + plot_layout(widths = c(3,2), ncol = 2)
print(pw)
# Link to Binance pool
cat(sprintf('<p><a href="https://www.binance.com/en/swap/liquidity?poolId=%s">Direct Link to Binance Pool (%s)</a></p>\n', id, poolName))
}
setStopLoss <- 0.005 #set desired stop loss for plots
allow_refData = FALSE
for (id in poolId_list[1]){
source("_SCRIPTS/script_plotPool_v0.R") # makes calc
cat(sprintf("#### %s <br>\n", poolName))
cat("<div>\n") #needed to encapsulate plot element so not to distrupt the TAB function
p1 <- LiqPlots_Trends() #plot1
p2 <- LiqPlots_ILChanges(stopLossTolerance = setStopLoss) #plot2
p3 <- LiqPlots_Swaps()
p4 <- LiqPlots_PNL(type = "rel") %>% print
p4bis <- LiqPlots_PNL(type = "abs") %>% print
p5 <- LiqPlots_plotAPY()
cat("</div>\n")
# Arrange plots (pathwork)
#Plot L
pw_left <- p1/p2
pw_left[[1]] %<>% + theme(axis.title.x = element_blank(), axis.text.x=element_blank()) # Remove x.axis title and tick names from subplot
pw_left[[1]] %<>% + theme(plot.background = element_rect(fill = "white"), panel.background = element_rect(fill = panel_color))
#pw[[2]] = pw[[2]] + theme(plot.title = element_blank()) # Remove title from second subplot
pw_left <- pw_left + plot_layout(heights = c(6,6), nrow = 2)
#Plot R
#pw_right <- ggplot(p4bis)/p3/p4/p5
#pw_right[[1]] %<>% + theme(plot.background = element_rect(fill = "white"), panel.background = element_rect(fill = panel_color))
pw_right <- p3/p4/p4bis/p5
pw_right[[1]] %<>% + theme(axis.title.x = element_blank(), axis.text.x=element_blank()) # Remove x.axis title and tick names from subplot
pw_right[[2]] %<>% + theme(axis.title.x = element_blank(), axis.text.x=element_blank())
pw_right[[3]] %<>% + theme(title = element_blank(), #suppress title
axis.title.x = element_blank(), axis.text.x=element_blank())
pw_right <- pw_right + plot_layout(heights = c(6,4,4,4), nrow = 4)
pw <- pw_left|pw_right
pw <- pw + plot_layout(widths = c(3,2), ncol = 2)
print(pw)
# Link to Binance pool
cat(sprintf('<p><a href="https://www.binance.com/en/swap/liquidity?poolId=%s">Direct Link to Binance Pool (%s)</a></p>\n', id, poolName))
}
setStopLoss <- 0.005 #set desired stop loss for plots
allow_refData = FALSE
for (id in poolId_list[1]){
source("_SCRIPTS/script_plotPool_v0.R") # makes calc
cat(sprintf("#### %s <br>\n", poolName))
cat("<div>\n") #needed to encapsulate plot element so not to distrupt the TAB function
p1 <- LiqPlots_Trends() #plot1
p2 <- LiqPlots_ILChanges(stopLossTolerance = setStopLoss) #plot2
p3 <- LiqPlots_Swaps()
p4 <- LiqPlots_PNL(type = "rel") %>% print
p4bis <- LiqPlots_PNL(type = "abs") %>% print
p5 <- LiqPlots_plotAPY()
cat("</div>\n")
# Arrange plots (pathwork)
#Plot L
pw_left <- p1/p2
pw_left[[1]] %<>% + theme(axis.title.x = element_blank(), axis.text.x=element_blank()) # Remove x.axis title and tick names from subplot
pw_left[[1]] %<>% + theme(plot.background = element_rect(fill = "white"), panel.background = element_rect(fill = panel_color))
#pw[[2]] = pw[[2]] + theme(plot.title = element_blank()) # Remove title from second subplot
pw_left <- pw_left + plot_layout(heights = c(6,6), nrow = 2)
#Plot R
#pw_right <- ggplot(p4bis)/p3/p4/p5
#pw_right[[1]] %<>% + theme(plot.background = element_rect(fill = "white"), panel.background = element_rect(fill = panel_color))
pw_right <- p3/p4/p4bis/p5
pw_right[[1]] %<>% + theme(axis.title.x = element_blank(), axis.text.x=element_blank()) # Remove x.axis title and tick names from subplot
pw_right[[2]] %<>% + theme(axis.title.x = element_blank(), axis.text.x=element_blank())
pw_right[[3]] %<>% + theme(plot.title = element_blank(), #suppress title
axis.title.x = element_blank(), axis.text.x=element_blank())
pw_right <- pw_right + plot_layout(heights = c(6,4,4,4), nrow = 4)
pw <- pw_left|pw_right
pw <- pw + plot_layout(widths = c(3,2), ncol = 2)
print(pw)
# Link to Binance pool
cat(sprintf('<p><a href="https://www.binance.com/en/swap/liquidity?poolId=%s">Direct Link to Binance Pool (%s)</a></p>\n', id, poolName))
}
source("D:/Clouds/GitHub/liquid-plots/_SCRIPTS/functions_plots.R")
source("D:/Clouds/GitHub/liquid-plots/_SCRIPTS/functions_plots.R")
setStopLoss <- 0.005 #set desired stop loss for plots
allow_refData = FALSE
for (id in poolId_list[1]){
source("_SCRIPTS/script_plotPool_v0.R") # makes calc
cat(sprintf("#### %s <br>\n", poolName))
cat("<div>\n") #needed to encapsulate plot element so not to distrupt the TAB function
p1 <- LiqPlots_Trends() #plot1
p2 <- LiqPlots_ILChanges(stopLossTolerance = setStopLoss) #plot2
p3 <- LiqPlots_Swaps()
p4 <- LiqPlots_PNL(type = "rel") %>% print
p4bis <- LiqPlots_PNL(type = "abs") %>% print
p5 <- LiqPlots_plotAPY()
cat("</div>\n")
# Arrange plots (pathwork)
#Plot L
pw_left <- p1/p2
pw_left[[1]] %<>% + theme(axis.title.x = element_blank(), axis.text.x=element_blank()) # Remove x.axis title and tick names from subplot
pw_left[[1]] %<>% + theme(plot.background = element_rect(fill = "white"), panel.background = element_rect(fill = panel_color))
#pw[[2]] = pw[[2]] + theme(plot.title = element_blank()) # Remove title from second subplot
pw_left <- pw_left + plot_layout(heights = c(6,6), nrow = 2)
#Plot R
#pw_right <- ggplot(p4bis)/p3/p4/p5
#pw_right[[1]] %<>% + theme(plot.background = element_rect(fill = "white"), panel.background = element_rect(fill = panel_color))
pw_right <- p3/p4/p4bis/p5
pw_right[[1]] %<>% + theme(axis.title.x = element_blank(), axis.text.x=element_blank()) # Remove x.axis title and tick names from subplot
pw_right[[2]] %<>% + theme(axis.title.x = element_blank(), axis.text.x=element_blank())
pw_right[[3]] %<>% + theme(plot.title = element_blank(), #suppress title
axis.title.x = element_blank(), axis.text.x=element_blank())
pw_right <- pw_right + plot_layout(heights = c(6,4,4,4), nrow = 4)
pw <- pw_left|pw_right
pw <- pw + plot_layout(widths = c(3,2), ncol = 2)
print(pw)
# Link to Binance pool
cat(sprintf('<p><a href="https://www.binance.com/en/swap/liquidity?poolId=%s">Direct Link to Binance Pool (%s)</a></p>\n', id, poolName))
}
setStopLoss <- 0.005 #set desired stop loss for plots
allow_refData = FALSE
for (id in poolId_list[1]){
source("_SCRIPTS/script_plotPool_v0.R") # makes calc
cat(sprintf("#### %s <br>\n", poolName))
cat("<div>\n") #needed to encapsulate plot element so not to distrupt the TAB function
p1 <- LiqPlots_Trends() #plot1
p2 <- LiqPlots_ILChanges(stopLossTolerance = setStopLoss) #plot2
p3 <- LiqPlots_Swaps()
p4abs <- LiqPlots_PNL(type = "abs") %>% print
p4rel <- LiqPlots_PNL(type = "rel") %>% print
p5 <- LiqPlots_plotAPY()
cat("</div>\n")
# Arrange plots (pathwork)
#Plot L
pw_left <- p1/p2
pw_left[[1]] %<>% + theme(axis.title.x = element_blank(), axis.text.x=element_blank()) # Remove x.axis title and tick names from subplot
pw_left[[1]] %<>% + theme(plot.background = element_rect(fill = "white"), panel.background = element_rect(fill = panel_color))
#pw[[2]] = pw[[2]] + theme(plot.title = element_blank()) # Remove title from second subplot
pw_left <- pw_left + plot_layout(heights = c(6,6), nrow = 2)
#Plot R
#pw_right <- ggplot(p4bis)/p3/p4/p5
#pw_right[[1]] %<>% + theme(plot.background = element_rect(fill = "white"), panel.background = element_rect(fill = panel_color))
pw_right <- p3/p4abs/p4rel/p5
pw_right[[1]] %<>% + theme(axis.title.x = element_blank(), axis.text.x=element_blank()) # Remove x.axis title and tick names from subplot
pw_right[[2]] %<>% + theme(axis.title.x = element_blank(), axis.text.x=element_blank())
pw_right[[3]] %<>% + theme(plot.title = element_blank(), #suppress title
axis.title.x = element_blank(), axis.text.x=element_blank())
pw_right <- pw_right + plot_layout(heights = c(6,4,3,4), nrow = 4)
pw <- pw_left|pw_right
pw <- pw + plot_layout(widths = c(3,2), ncol = 2)
print(pw)
# Link to Binance pool
cat(sprintf('<p><a href="https://www.binance.com/en/swap/liquidity?poolId=%s">Direct Link to Binance Pool (%s)</a></p>\n', id, poolName))
}
setStopLoss <- 0.005 #set desired stop loss for plots
allow_refData = FALSE
for (id in poolId_list[1]){
source("_SCRIPTS/script_plotPool_v0.R") # makes calc
cat(sprintf("#### %s <br>\n", poolName))
cat("<div>\n") #needed to encapsulate plot element so not to distrupt the TAB function
p1 <- LiqPlots_Trends() #plot1
p2 <- LiqPlots_ILChanges(stopLossTolerance = setStopLoss) #plot2
p3 <- LiqPlots_Swaps()
p4abs <- LiqPlots_PNL(type = "abs")
p4rel <- LiqPlots_PNL(type = "rel")
p5 <- LiqPlots_plotAPY()
cat("</div>\n")
# Arrange plots (pathwork)
#Plot L
pw_left <- p1/p2
pw_left[[1]] %<>% + theme(axis.title.x = element_blank(), axis.text.x=element_blank()) # Remove x.axis title and tick names from subplot
pw_left[[1]] %<>% + theme(plot.background = element_rect(fill = "white"), panel.background = element_rect(fill = panel_color))
#pw[[2]] = pw[[2]] + theme(plot.title = element_blank()) # Remove title from second subplot
pw_left <- pw_left + plot_layout(heights = c(6,6), nrow = 2)
#Plot R
#pw_right <- ggplot(p4bis)/p3/p4/p5
#pw_right[[1]] %<>% + theme(plot.background = element_rect(fill = "white"), panel.background = element_rect(fill = panel_color))
pw_right <- p3/p4abs/p4rel/p5
pw_right[[1]] %<>% + theme(axis.title.x = element_blank(), axis.text.x=element_blank()) # Remove x.axis title and tick names from subplot
pw_right[[2]] %<>% + theme(axis.title.x = element_blank(), axis.text.x=element_blank())
pw_right[[3]] %<>% + theme(plot.title = element_blank(), #suppress title
axis.title.x = element_blank(), axis.text.x=element_blank())
pw_right <- pw_right + plot_layout(heights = c(6,4,3,4), nrow = 4)
pw <- pw_left|pw_right
pw <- pw + plot_layout(widths = c(3,2), ncol = 2)
print(pw)
# Link to Binance pool
cat(sprintf('<p><a href="https://www.binance.com/en/swap/liquidity?poolId=%s">Direct Link to Binance Pool (%s)</a></p>\n', id, poolName))
}
